//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
// Copyright (c) 2016-21, Lawrence Livermore National Security, LLC
// and RAJA project contributors. See the RAJA/COPYRIGHT file for details.
//
// SPDX-License-Identifier: (BSD-3-Clause)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

//
// test/include headers
//
#include "RAJA_test-base.hpp"
#include "RAJA_test-camp.hpp"
#include "RAJA_test-index-types.hpp"
#include "RAJA_test-reducepol.hpp"

//
// Header for tests in ./tests directory
//
// Note: CMake adds ./tests as an include dir for these tests.
//
#include "test-kernel@RESOURCE@reduce-conditional-loop.hpp"

// Sequential execution policy types
using SequentialKernelExecPols = camp::list<

  RAJA::KernelPolicy<
    RAJA::statement::For<0, RAJA::seq_exec,
      RAJA::statement::If<RAJA::statement::Param<0>,
        RAJA::statement::Lambda<0, RAJA::Segs<0>>>,
      RAJA::statement::Lambda<1, RAJA::Segs<0>>
    >
  >,

  RAJA::KernelPolicy<
    RAJA::statement::For<0, RAJA::loop_exec,
      RAJA::statement::If<RAJA::statement::Param<0>,
        RAJA::statement::Lambda<0, RAJA::Segs<0>>>,
      RAJA::statement::Lambda<1, RAJA::Segs<0>>
    >
  >

>;

#if defined(RAJA_ENABLE_OPENMP)
using OpenMPKernelExecPols = camp::list<

  RAJA::KernelPolicy<
    RAJA::statement::For<0, RAJA::omp_parallel_for_exec,
      RAJA::statement::If<RAJA::statement::Param<0>,
        RAJA::statement::Lambda<0, RAJA::Segs<0>>>,
      RAJA::statement::Lambda<1, RAJA::Segs<0>>
    >
  >

>;
#endif  // if defined(RAJA_ENABLE_OPENMP)

#if defined(RAJA_ENABLE_TBB)
using TBBKernelExecPols =
camp::list<

  RAJA::KernelPolicy<
    RAJA::statement::For<0, RAJA::tbb_for_exec,
      RAJA::statement::If<RAJA::statement::Param<0>,
        RAJA::statement::Lambda<0, RAJA::Segs<0>>>,
      RAJA::statement::Lambda<1, RAJA::Segs<0>>
    >
  >

>;
#endif  // if defined(RAJA_ENABLE_TBB)

#if defined(RAJA_ENABLE_TARGET_OPENMP)
using OpenMPTargetKernelExecPols =
camp::list<

  RAJA::KernelPolicy<
    RAJA::statement::For<0, RAJA::omp_target_parallel_for_exec_nt,
      RAJA::statement::If<RAJA::statement::Param<0>,
        RAJA::statement::Lambda<0, RAJA::Segs<0>>>,
      RAJA::statement::Lambda<1, RAJA::Segs<0>>
    >
  >

>;
#endif  // if defined(RAJA_ENABLE_TARGET_OPENMP)

#if defined(RAJA_ENABLE_CUDA)
using CudaKernelExecPols =
camp::list<

  RAJA::KernelPolicy<
    RAJA::statement::CudaKernelFixedAsync<256,
      RAJA::statement::Tile<0, RAJA::tile_fixed<256>, RAJA::cuda_block_x_loop,
        RAJA::statement::For<0, RAJA::cuda_thread_x_direct,
          RAJA::statement::If<RAJA::statement::Param<0>,
            RAJA::statement::Lambda<0, RAJA::Segs<0>>>,
          RAJA::statement::Lambda<1, RAJA::Segs<0>>
        >
      >
    >
  >

>;
#endif  // if defined(RAJA_ENABLE_CUDA)

#if defined(RAJA_ENABLE_HIP)
using HipKernelExecPols =
camp::list<

  RAJA::KernelPolicy<
    RAJA::statement::HipKernelFixedAsync<256,
      RAJA::statement::Tile<0, RAJA::tile_fixed<256>, RAJA::hip_block_x_loop,
        RAJA::statement::For<0, RAJA::hip_thread_x_direct,
          RAJA::statement::If<RAJA::statement::Param<0>,
            RAJA::statement::Lambda<0, RAJA::Segs<0>>>,
          RAJA::statement::Lambda<1, RAJA::Segs<0>>
        >
      >
    >
  >

>;
#endif  // if defined(RAJA_ENABLE_HIP)

//
// Cartesian product of types used in parameterized tests
//
using @BACKEND@KernelReduceConditionalLoopTypes =
  Test< camp::cartesian_product<IdxTypeList,
                                @BACKEND@ResourceList,
                                @BACKEND@KernelExecPols,
                                @BACKEND@ReducePols>>::Types;

//
// Instantiate parameterized tests
//
INSTANTIATE_TYPED_TEST_SUITE_P(@BACKEND@,
                               KernelReduceConditionalLoopTest,
                               @BACKEND@KernelReduceConditionalLoopTypes);
